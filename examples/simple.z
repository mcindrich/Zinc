namespace simple

import std
import basic

` Simple Comment
` another comment

obj Convertable {
    fn toInt() -> Int32;
    fn toString() -> String;
}

enum Color {
    Red,
    Green,
    Blue
}

obj SimpleObject : Convertable {
    ` declarations
    var Age type Int32
    var Name type String
    var Colors type Color[]

    fn constructor(self, age type Int32 = 10, name type String = "___name___") -> Void {
        self.Name = name
        self.Age = age

        ret null
    }
    fn toInt() -> Int32 {
        ret Age
    }

    fn toString() -> String {
        ret Name + "; " + Age.toString() + "; " + Colors.toString()
    }
}

fn useConvertable(conv type Convertable) -> Void {
    std.println(conv.toInt())
    ret null
}

fn main() -> Void {
    ` predetermined by RHS
    var simple = 20

    basic.printInt(20)

    ` declared type
    var simple_with_type type List<Int32> = 100

    var so = new SimpleObject(20, "zinccy")

    std.println(so.toString())
    useConvertable(so)
    
    ret null
}